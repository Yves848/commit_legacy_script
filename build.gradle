plugins {
    id("pharmagest.base")
    id("pharmagest.publish")
    id("distribution") // see https://docs.gradle.org/current/userguide/distribution_plugin.html
}

def BDSCOMMONDIR = "C:\\Users\\jenkins\\Documents\\RAD Studio\\7.0"
def SVN = System.getenv("WORKSPACE")
def COMPOSANTS_DIR = "${SVN}\\composants"
def COMP = "${COMPOSANTS_DIR}"
def BDS = "C:\\Program Files (x86)\\Embarcadero\\RAD Studio\\7.0"
def SEARCH_PATH = [
            "C:\\Program Files (x86)\\Devart\\ODAC for RAD Studio 2010\\Bin",
            "C:\\Program Files (x86)\\Devart\\ODAC for RAD Studio 2010\\Lib",
            "${BDS}\\Imports",
            "${BDS}\\include",
            "${BDS}\\lib",
            "${BDS}\\Lib\\Indy10",
            "C:\\Users\\jenkins\\Documents\\RAD Studio\\7.0\\Dcp",
            "${SVN}\\bin",
            "${SVN}\\Composants\\Autres\\PerlRegex",
            "${SVN}\\Composants\\zlib",
            "${SVN}\\Lib",
            "${COMPOSANTS_DIR}\\AccesBD\\DISQLite\\D2010",
            "${COMPOSANTS_DIR}\\Bin",
            "${COMPOSANTS_DIR}\\Lib",
            "${COMPOSANTS_DIR}\\Librairies\\jcl\\lib\\d14",
            "${COMPOSANTS_DIR}\\Librairies\\jcl\\source\\include",
            "${COMPOSANTS_DIR}\\Librairies\\jvcl\\common",
            "${COMPOSANTS_DIR}\\Librairies\\jvcl\\lib\\D14",
            "${COMPOSANTS_DIR}\\Librairies\\jvcl\\Resources",
            "${COMPOSANTS_DIR}\\Librairies\\jwa\\Common",
            "${COMPOSANTS_DIR}\\Librairies\\jwa\\Includes",
            "${COMPOSANTS_DIR}\\Librairies\\jwa\\Packages\\bds10",
            "${COMPOSANTS_DIR}\\pi\\PIClasses",
            "${COMPOSANTS_DIR}\\pi\\PIDB",
            "${COMPOSANTS_DIR}\\pi\\PILGPI",
            "${COMPOSANTS_DIR}\\AccesBD\\ODAC\\Lib",
            "${COMPOSANTS_DIR}\\Librairies\\jwa\\Win32API",
            "${COMPOSANTS_DIR}\\Librairies\\Imaging",
            "${COMPOSANTS_DIR}\\Librairies\\Imaging\\JpegLib",
            "${COMPOSANTS_DIR}\\Librairies\\Imaging\\Zlib"
]


def buildCommit = tasks.register("buildCommit", PWBuildTask) {
    projet = "dist"
    envVars = Map.of(
        "ANT", System.getenv("ANT"),
        "ANT_HOME", System.getenv("ANT"),
        "BDSCOMMONDIR", BDSCOMMONDIR,
        "COMP", COMPOSANTS_DIR,
        "SVN", System.getenv("WORKSPACE"),
        "BDS", BDS, 
        "SEARCH_PATH", SEARCH_PATH,
        "DCC_UnitSearchPath", SEARCH_PATH.join(';'),
        "FrameworkVersion", 'v2.0.50727',
    )
    outputs.dir(".\\Bin")
}

buildCommit.configure {
    it.mustRunAfter(distZip)
}
build.dependsOn(buildCommit)


distributions {
    main {
        contents {
            from "Bin"
        }
    }
}

tasks.distTar.enabled = false

/**
 * Call powershelll script build
 */
abstract class PWBuildTask extends DefaultTask {

    /**
     * variable d'environnements
     */
    @Input
    Map<String, Object> envVars = new HashMap()
    
    /**
     * Param√®tre build 
     */
    @Input
    String projet = "dist"

    @TaskAction
    def execScript() {
        project.exec {
            if (envVars != null) {
                environment.putAll(envVars)
            }
            commandLine "powershell", ".\\build.ps1 -projet ${projet} -SVN ${envVars.SVN} -BDSCOMMONDIR ${envVars.BDSCOMMONDIR}"
        }
    }
}
